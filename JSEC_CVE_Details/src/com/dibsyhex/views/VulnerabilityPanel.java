package com.dibsyhex.views;

import com.dibsyhex.controllers.MainController;
import com.dibsyhex.views.JsonListener;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.LayoutManager;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.HashMap;
import java.util.Map;
import javax.json.JsonArray;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;

public class VulnerabilityPanel
extends JPanel
implements ActionListener {
    private JLabel vwe;
    private JLabel ce;
    private JLabel of;
    private JLabel csrf;
    private JLabel fi;
    private JLabel gp;
    private JLabel sqli;
    private JLabel xss;
    private JLabel dt;
    private JLabel mc;
    private JLabel hrs;
    private JLabel bs;
    private JLabel gi;
    private JLabel dos;
    private JCheckBox check_vwe;
    private JCheckBox check_ce;
    private JCheckBox check_of;
    private JCheckBox check_csrf;
    private JCheckBox check_fi;
    private JCheckBox check_gp;
    private JCheckBox check_sqli;
    private JCheckBox check_xss;
    private JCheckBox check_dt;
    private JCheckBox check_mc;
    private JCheckBox check_hrs;
    private JCheckBox check_bs;
    private JCheckBox check_gi;
    private JCheckBox check_dos;
    private JButton fetch;
    private Map params = new HashMap();
    private JsonListener stringListener;

    public VulnerabilityPanel() {
        TitledBorder innerBorder = BorderFactory.createTitledBorder("Vulnerability List");
        Border outerBorder = BorderFactory.createEmptyBorder(15, 15, 15, 15);
        this.setBorder(BorderFactory.createCompoundBorder(innerBorder, outerBorder));
        this.setFont(new Font("Serif", 0, 6));
        this.setBackground(new Color(204, 255, 255));
        Dimension dimension = this.getPreferredSize();
        dimension.width = 200;
        this.setPreferredSize(dimension);
        this.vwe = new JLabel("Vulnerabilities with exploits");
        this.ce = new JLabel("Code execution");
        this.of = new JLabel("Overflows");
        this.csrf = new JLabel("Cross Site Request Forgery");
        this.fi = new JLabel("File inclusion");
        this.gp = new JLabel("Gain privilege");
        this.sqli = new JLabel("Sql injection");
        this.xss = new JLabel("Cross site scripting");
        this.dt = new JLabel("Directory traversal");
        this.mc = new JLabel("Memory corruption");
        this.hrs = new JLabel("Http response splitting");
        this.bs = new JLabel("Bypass something");
        this.gi = new JLabel("Gain information");
        this.dos = new JLabel("Denial of service");
        this.check_vwe = new JCheckBox();
        this.check_ce = new JCheckBox();
        this.check_of = new JCheckBox();
        this.check_csrf = new JCheckBox();
        this.check_fi = new JCheckBox();
        this.check_gp = new JCheckBox();
        this.check_sqli = new JCheckBox();
        this.check_xss = new JCheckBox();
        this.check_dt = new JCheckBox();
        this.check_mc = new JCheckBox();
        this.check_hrs = new JCheckBox();
        this.check_bs = new JCheckBox();
        this.check_gi = new JCheckBox();
        this.check_dos = new JCheckBox();
        this.setLayout(new GridBagLayout());
        GridBagConstraints gc = new GridBagConstraints();
        gc.fill = 2;
        gc.gridx = 0;
        gc.gridy = 0;
        this.add((Component)this.check_vwe, gc);
        gc.fill = 2;
        gc.gridx = 1;
        gc.gridy = 0;
        this.add((Component)this.vwe, gc);
        gc.fill = 2;
        gc.gridx = 0;
        gc.gridy = 1;
        this.add((Component)this.check_ce, gc);
        gc.fill = 2;
        gc.gridx = 1;
        gc.gridy = 1;
        this.add((Component)this.ce, gc);
        gc.fill = 2;
        gc.gridx = 0;
        gc.gridy = 2;
        this.add((Component)this.check_of, gc);
        gc.fill = 2;
        gc.gridx = 1;
        gc.gridy = 2;
        this.add((Component)this.of, gc);
        gc.fill = 2;
        gc.gridx = 0;
        gc.gridy = 3;
        this.add((Component)this.check_csrf, gc);
        gc.fill = 2;
        gc.gridx = 1;
        gc.gridy = 3;
        this.add((Component)this.csrf, gc);
        gc.fill = 2;
        gc.gridx = 0;
        gc.gridy = 4;
        this.add((Component)this.check_fi, gc);
        gc.fill = 2;
        gc.gridx = 1;
        gc.gridy = 4;
        this.add((Component)this.fi, gc);
        gc.fill = 2;
        gc.gridx = 0;
        gc.gridy = 5;
        this.add((Component)this.check_gp, gc);
        gc.fill = 2;
        gc.gridx = 1;
        gc.gridy = 5;
        this.add((Component)this.gp, gc);
        gc.fill = 2;
        gc.gridx = 0;
        gc.gridy = 6;
        this.add((Component)this.check_sqli, gc);
        gc.fill = 2;
        gc.gridx = 1;
        gc.gridy = 6;
        this.add((Component)this.sqli, gc);
        gc.fill = 2;
        gc.gridx = 0;
        gc.gridy = 7;
        this.add((Component)this.check_xss, gc);
        gc.fill = 2;
        gc.gridx = 1;
        gc.gridy = 7;
        this.add((Component)this.xss, gc);
        gc.fill = 2;
        gc.gridx = 0;
        gc.gridy = 8;
        this.add((Component)this.check_dt, gc);
        gc.fill = 2;
        gc.gridx = 1;
        gc.gridy = 8;
        this.add((Component)this.dt, gc);
        gc.fill = 2;
        gc.gridx = 0;
        gc.gridy = 9;
        this.add((Component)this.check_mc, gc);
        gc.fill = 2;
        gc.gridx = 1;
        gc.gridy = 9;
        this.add((Component)this.mc, gc);
        gc.fill = 2;
        gc.gridx = 0;
        gc.gridy = 10;
        this.add((Component)this.check_hrs, gc);
        gc.fill = 2;
        gc.gridx = 1;
        gc.gridy = 10;
        this.add((Component)this.hrs, gc);
        gc.fill = 2;
        gc.gridx = 0;
        gc.gridy = 11;
        this.add((Component)this.check_bs, gc);
        gc.fill = 2;
        gc.gridx = 1;
        gc.gridy = 11;
        this.add((Component)this.bs, gc);
        gc.fill = 2;
        gc.gridx = 0;
        gc.gridy = 12;
        this.add((Component)this.check_gi, gc);
        gc.fill = 2;
        gc.gridx = 1;
        gc.gridy = 12;
        this.add((Component)this.gi, gc);
        gc.fill = 2;
        gc.gridx = 0;
        gc.gridy = 13;
        this.add((Component)this.check_dos, gc);
        gc.fill = 2;
        gc.gridx = 1;
        gc.gridy = 13;
        this.add((Component)this.dos, gc);
        this.fetch = new JButton("Fetch CVE");
        this.fetch.addActionListener(this);
        gc.fill = 2;
        gc.gridx = 0;
        gc.gridy = 14;
        gc.gridwidth = 2;
        gc.weighty = 1.0;
        this.add((Component)this.fetch, gc);
    }

    public void setStringListener(JsonListener stringListener) {
        this.stringListener = stringListener;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        this.params.put("vendor_id", "0");
        this.params.put("product_id", "0");
        this.params.put("version_id", "0");
        if (this.check_vwe.isSelected()) {
            this.params.put("hasexp", "1");
        } else {
            this.params.put("hasexp", "0");
        }
        if (this.check_ce.isSelected()) {
            this.params.put("opec", "1");
        } else {
            this.params.put("opec", "0");
        }
        if (this.check_of.isSelected()) {
            this.params.put("opov", "1");
        } else {
            this.params.put("opov", "0");
        }
        if (this.check_csrf.isSelected()) {
            this.params.put("opcsrf", "1");
        } else {
            this.params.put("opcsrf", "0");
        }
        if (this.check_fi.isSelected()) {
            this.params.put("opfileinc", "1");
        } else {
            this.params.put("opfileinc", "0");
        }
        if (this.check_gp.isSelected()) {
            this.params.put("opgpriv", "1");
        } else {
            this.params.put("opgpriv", "0");
        }
        if (this.check_sqli.isSelected()) {
            this.params.put("opsqli", "1");
        } else {
            this.params.put("opsqli", "0");
        }
        if (this.check_xss.isSelected()) {
            this.params.put("opxss", "1");
        } else {
            this.params.put("opxss", "0");
        }
        if (this.check_dt.isSelected()) {
            this.params.put("opdirt", "1");
        } else {
            this.params.put("opdirt", "0");
        }
        if (this.check_mc.isSelected()) {
            this.params.put("opmemc", "1");
        } else {
            this.params.put("opmemc", "0");
        }
        if (this.check_hrs.isSelected()) {
            this.params.put("ophttprs", "1");
        } else {
            this.params.put("ophttprs", "0");
        }
        if (this.check_bs.isSelected()) {
            this.params.put("opbyp", "1");
        } else {
            this.params.put("opbyp", "0");
        }
        if (this.check_gi.isSelected()) {
            this.params.put("opginf", "1");
        } else {
            this.params.put("opginf", "0");
        }
        if (this.check_dos.isSelected()) {
            this.params.put("opdos", "1");
        } else {
            this.params.put("opdos", "0");
        }
        this.params.put("orderby", "0");
        this.params.put("cvssscoremin", "0");
        MainController mainController = new MainController(this.params, 30);
        mainController.process();
        JsonArray jsonArray = mainController.getJsonArray();
        if (this.stringListener != null) {
            this.stringListener.returnedText(jsonArray);
        }
    }
}

