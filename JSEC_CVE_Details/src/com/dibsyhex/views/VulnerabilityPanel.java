package com.dibsyhex.views;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.HashMap;
import java.util.Map;

import javax.json.JsonArray;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.border.Border;

import com.dibsyhex.controllers.MainController;

public class VulnerabilityPanel extends JPanel implements ActionListener{
	
	private JLabel vwe;
	private JLabel ce;
	private JLabel of;
	private JLabel csrf;
	private JLabel fi;
	private JLabel gp;
	private JLabel sqli;
	private JLabel xss;
	private JLabel dt;
	private JLabel mc;
	private JLabel hrs;
	private JLabel bs;
	private JLabel gi;
	private JLabel dos;
	
	
	private JCheckBox check_vwe;
	private JCheckBox check_ce;
	private JCheckBox check_of;
	private JCheckBox check_csrf;
	private JCheckBox check_fi;
	private JCheckBox check_gp;
	private JCheckBox check_sqli;
	private JCheckBox check_xss;
	private JCheckBox check_dt;
	private JCheckBox check_mc;
	private JCheckBox check_hrs;
	private JCheckBox check_bs;
	private JCheckBox check_gi;
	private JCheckBox check_dos;
	
	
	private JButton fetch;
	
	private Map params;
	
	private JsonListener stringListener;
	
	
	public VulnerabilityPanel(){
		
		params=new HashMap();
		
		
		Border innerBorder = BorderFactory.createTitledBorder("Vulnerability List");
		Border outerBorder = BorderFactory.createEmptyBorder(15, 15, 15, 15);
		setBorder(BorderFactory.createCompoundBorder(innerBorder, outerBorder));
		
		setFont(new Font("Serif",Font.PLAIN,6));
		setBackground(new Color(204,255,255));
		
		Dimension dimension=getPreferredSize();
		dimension.width=200;
		setPreferredSize(dimension);
		
		
		vwe=new JLabel("Vulnerabilities with exploits");
		ce=new JLabel("Code execution");
		of=new JLabel("Overflows");
		csrf=new JLabel("Cross Site Request Forgery");
		fi=new JLabel("File inclusion");
		gp=new JLabel("Gain privilege");
		sqli=new JLabel("Sql injection");
		xss=new JLabel("Cross site scripting");
		dt=new JLabel("Directory traversal");
		mc=new JLabel("Memory corruption");
		hrs=new JLabel("Http response splitting");
		bs=new JLabel("Bypass something");
		gi=new JLabel("Gain information");
		dos=new JLabel("Denial of service");
		
		
		check_vwe=new JCheckBox();
		check_ce=new JCheckBox();
		check_of=new JCheckBox();
		check_csrf=new JCheckBox();
		check_fi=new JCheckBox();
		check_gp=new JCheckBox();
		check_sqli=new JCheckBox();
		check_xss=new JCheckBox();
		check_dt=new JCheckBox();
		check_mc=new JCheckBox();
		check_hrs=new JCheckBox();
		check_bs=new JCheckBox();
		check_gi=new JCheckBox();
		check_dos=new JCheckBox();
		
		setLayout(new GridBagLayout());
		GridBagConstraints gc=new GridBagConstraints();
		
	
		////////////////////////////////////////
		
		gc.fill=GridBagConstraints.HORIZONTAL;
		gc.gridx=0;
		gc.gridy=0;
		add(check_vwe,gc);
		
		gc.fill=GridBagConstraints.HORIZONTAL;
		gc.gridx=1;
		gc.gridy=0;
		add(vwe,gc);
		
		/////////////////////////////////////////
		
		gc.fill=GridBagConstraints.HORIZONTAL;
		gc.gridx=0;
		gc.gridy=1;
		add(check_ce,gc);
		
		gc.fill=GridBagConstraints.HORIZONTAL;
		gc.gridx=1;
		gc.gridy=1;
		add(ce,gc);		
		
		/////////////////////////////////////////
		
		gc.fill=GridBagConstraints.HORIZONTAL;
		gc.gridx=0;
		gc.gridy=2;
		add(check_of,gc);
		
		gc.fill=GridBagConstraints.HORIZONTAL;
		gc.gridx=1;
		gc.gridy=2;
		add(of,gc);
		
		/////////////////////////////////////////
		
		gc.fill=GridBagConstraints.HORIZONTAL;
		gc.gridx=0;
		gc.gridy=3;
		add(check_csrf,gc);
		
		gc.fill=GridBagConstraints.HORIZONTAL;
		gc.gridx=1;
		gc.gridy=3;
		add(csrf,gc);
		
		/////////////////////////////////////////
		
		gc.fill=GridBagConstraints.HORIZONTAL;
		gc.gridx=0;
		gc.gridy=4;
		add(check_fi,gc);
		
		gc.fill=GridBagConstraints.HORIZONTAL;
		gc.gridx=1;
		gc.gridy=4;
		add(fi,gc);
		
		/////////////////////////////////////////
		
		gc.fill=GridBagConstraints.HORIZONTAL;
		gc.gridx=0;
		gc.gridy=5;
		add(check_gp,gc);
		
		gc.fill=GridBagConstraints.HORIZONTAL;
		gc.gridx=1;
		gc.gridy=5;
		add(gp,gc);
		
		
		/////////////////////////////////////////
		
		gc.fill=GridBagConstraints.HORIZONTAL;
		gc.gridx=0;
		gc.gridy=6;
		add(check_sqli,gc);
		
		gc.fill=GridBagConstraints.HORIZONTAL;
		gc.gridx=1;
		gc.gridy=6;
		add(sqli,gc);
				
		/////////////////////////////////////////
		
		gc.fill=GridBagConstraints.HORIZONTAL;
		gc.gridx=0;
		gc.gridy=7;
		add(check_xss,gc);
		
		gc.fill=GridBagConstraints.HORIZONTAL;
		gc.gridx=1;
		gc.gridy=7;
		add(xss,gc);
		
		/////////////////////////////////////////
		
		gc.fill=GridBagConstraints.HORIZONTAL;
		gc.gridx=0;
		gc.gridy=8;
		add(check_dt,gc);
		
		gc.fill=GridBagConstraints.HORIZONTAL;
		gc.gridx=1;
		gc.gridy=8;
		add(dt,gc);
		
		/////////////////////////////////////////
		
		gc.fill=GridBagConstraints.HORIZONTAL;
		gc.gridx=0;
		gc.gridy=9;
		add(check_mc,gc);
		
		gc.fill=GridBagConstraints.HORIZONTAL;
		gc.gridx=1;
		gc.gridy=9;
		add(mc,gc);
		
		/////////////////////////////////////////
		
		gc.fill=GridBagConstraints.HORIZONTAL;
		gc.gridx=0;
		gc.gridy=10;
		add(check_hrs,gc);
		
		gc.fill=GridBagConstraints.HORIZONTAL;
		gc.gridx=1;
		gc.gridy=10;
		add(hrs,gc);
		
		/////////////////////////////////////////
		
		gc.fill=GridBagConstraints.HORIZONTAL;
		gc.gridx=0;
		gc.gridy=11;
		add(check_bs,gc);
		
		gc.fill=GridBagConstraints.HORIZONTAL;
		gc.gridx=1;
		gc.gridy=11;
		add(bs,gc);
		
		/////////////////////////////////////////
		
		gc.fill=GridBagConstraints.HORIZONTAL;
		gc.gridx=0;
		gc.gridy=12;
		add(check_gi,gc);
		
		gc.fill=GridBagConstraints.HORIZONTAL;
		gc.gridx=1;
		gc.gridy=12;
		add(gi,gc);
		
		/////////////////////////////////////////
		
		gc.fill=GridBagConstraints.HORIZONTAL;
		gc.gridx=0;
		gc.gridy=13;
		add(check_dos,gc);
		
		gc.fill=GridBagConstraints.HORIZONTAL;
		gc.gridx=1;
		gc.gridy=13;
		add(dos,gc);
		
		/////////////////////////////////////////
		
		fetch=new JButton("Fetch CVE");
		fetch.addActionListener(this);
		
		gc.fill=GridBagConstraints.HORIZONTAL;
		gc.gridx=0;
		gc.gridy=14;
		gc.gridwidth=2;
		gc.weighty=1;
		add(fetch,gc);
		
		
	}

	public void setStringListener(JsonListener stringListener){
		this.stringListener=stringListener;
	}
	
	



	@Override
	public void actionPerformed(ActionEvent e) {
		
		
		///////////////////////////
		
		params.put("vendor_id","0");		
		params.put("product_id","0");
		params.put("version_id","0");
		
		//////////////////////////
		if(check_vwe.isSelected())
			params.put("hasexp","1");
		else
			params.put("hasexp","0");
		/////////////////////////
		if(check_ce.isSelected())
			params.put("opec","1");
		else
			params.put("opec","0");
		/////////////////////////
		if(check_of.isSelected())
			params.put("opov","1");
		else
			params.put("opov","0");		
		//////////////////////////
		if(check_csrf.isSelected())
			params.put("opcsrf","1");
		else
			params.put("opcsrf","0");
		//////////////////////////
		if(check_fi.isSelected())
			params.put("opfileinc","1");
		else
			params.put("opfileinc","0");
		//////////////////////////
		if(check_gp.isSelected())
			params.put("opgpriv","1");
		else
			params.put("opgpriv","0");		
		//////////////////////////
		if(check_sqli.isSelected())
			params.put("opsqli","1");
		else
			params.put("opsqli","0");
		//////////////////////////
		if(check_xss.isSelected())
			params.put("opxss","1");
		else
			params.put("opxss","0");
		/////////////////////////
		if(check_dt.isSelected())
			params.put("opdirt","1");
		else
			params.put("opdirt","0");
		/////////////////////////
		if(check_mc.isSelected())
			params.put("opmemc","1");
		else
			params.put("opmemc","0");
		/////////////////////////
		if(check_hrs.isSelected())
			params.put("ophttprs","1");
		else
			params.put("ophttprs","0");	
		/////////////////////////
		if(check_bs.isSelected())
			params.put("opbyp","1");
		else
			params.put("opbyp","0");
		////////////////////////
		if(check_gi.isSelected())
			params.put("opginf","1");
		else
			params.put("opginf","0");		
		////////////////////////
		if(check_dos.isSelected())
			params.put("opdos","1");
		else
			params.put("opdos","0");
		////////////////////////
		
		params.put("orderby","0");
		params.put("cvssscoremin","0");
		
		
		
		MainController mainController=new MainController(params, 30); 
		mainController.process();
		JsonArray jsonArray=mainController.getJsonArray();
		
		if(stringListener!=null){
			stringListener.returnedText(jsonArray);
		}
		
	}
}
